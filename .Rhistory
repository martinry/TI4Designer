runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
brewer.pal(8, "Accent")
colorRampPalette(brewer.pal(8, "Accent"))
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
?renderInfoBox
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
textOutput("dataDetails")
runApp('ProteoMill')
runApp('ProteoMill')
?htmlOutput
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
ddw
names(ddw)
names(ddw)[2:ncol(ddw)]
sub('_.*', '', names(ddw)[2:ncol(ddw)])
sub('_.*', '', names(ddw)[2:ncol(ddw)]) %>% uniqueN()
sub('.*_', '', names(ddw)[2:ncol(ddw)]) %>% uniqueN()
sub('.*_', '', names(ddw)[2:ncol(ddw)])
names(ddw)[2:ncol(ddw)]) %>% sub('.*_', '')
names(ddw)[2:ncol(ddw)] %>% sub('.*_', '')
names(ddw)[2:ncol(ddw)]
names(ddw)[2:ncol(ddw)] %>% sub('.*_', '', '.')
names(ddw)[2:ncol(ddw)] %>% sub('.*_', '', .)
names(ddw)[2:ncol(ddw)] %>% sub('.*_', '', .) %>% uniqueN()
names(ddw)[2:ncol(ddw)] %>% sub('_.*', '', .) %>% uniqueN()
names(ddw)[2:ncol(ddw)] %>% sub('_.*', '', .)
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
?bsTooltip
?cor
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
?tags$a
?a
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
shiny::runApp('ProteoMill')
shiny::runApp('ProteoMill')
collect <- function (source_fp, target_fp = "") {
target_fp <- file.path(basename(source_fp))
out_name <- gsub(".gz", "", target_fp)
if (file.exists(out_name)) {
return(out_name)
}
else {
download.file(url = source_fp, destfile = target_fp)
if (grepl(".gz", target_fp, fixed = T)) {
R.utils::gunzip(target_fp, overwrite = F)
}
return(out_name)
}
}
# Pathways hierarchy relationship
REACTOME_hierarchy <- data.table::fread(collect("https://reactome.org/download/current/ReactomePathwaysRelation.txt"),
header = F)
# All levels of the pathway hierarchy
# https://reactome.org/download/current/UniProt2Reactome_All_Levels.txt
#
REACTOME_all <- data.table::fread(collect("https://reactome.org/download/current/UniProt2Reactome_All_Levels.txt"))
REACTOME_all
REACTOME_all[species == "Mus musculus"]
colnames(REACTOME_all) <- c("UniprotID",
"ReactomeID",
"URL",
"Pathway_name",
"Evidence_code",
"Species")
REACTOME_all[species == "Mus musculus"]
class(REACTOME_all)
REACTOME_all[Species == "Mus musculus"]
usernames <- sapply(LETTERS)
list(names())
list(LETTERS)
LETTERS
usernames <- LETTERS
usernames[1]
output <- matrix(ncol=4, nrow=length(usernames))
output
i <- 1
for (un in usernames) {
pre <- paste(filter(all_posts, username==un, created_day<6)$body, collapse="\n")
on <- paste(filter(all_posts, username==un, created_day==6)$body, collapse="\n")
post <- paste(filter(all_posts, username==un, created_day>6)$body, collapse="\n")
output[i,] <- c(un, pre, on, post)
i <- i+1
}
length(LETTERS)
all_posts <- data.frame(username = LETTERS, created_day = 1:26)
i <- 1
for (un in usernames) {
pre <- paste(filter(all_posts, username==un, created_day<6)$body, collapse="\n")
on <- paste(filter(all_posts, username==un, created_day==6)$body, collapse="\n")
post <- paste(filter(all_posts, username==un, created_day>6)$body, collapse="\n")
output[i,] <- c(un, pre, on, post)
i <- i+1
}
all_posts <- data.frame(username = LETTERS, created_day = 1:26)
i <- 1
for (un in usernames) {
pre <- paste(filter(all_posts, username==un, created_day<6)$body, collapse="\n")
on <- paste(filter(all_posts, username==un, created_day==6)$body, collapse="\n")
post <- paste(filter(all_posts, username==un, created_day>6)$body, collapse="\n")
output[i,] <- c(un, pre, on, post)
i <- i+1
}
all_posts
paste(filter(all_posts, username=="A", created_day<6)$body, collapse="\n")
str(all_posts)
paste(filter(all_posts, username=="A", created_day<6), collapse="\n")
?filter
library(dplyr)
paste(filter(all_posts, username=="A", created_day<6), collapse="\n")
paste(dplyr::filter(all_posts, username=="A", created_day<6), collapse="\n")
paste(dplyr::filter(all_posts, username=="A", created_day<6)$body, collapse="\n")
i <- 1
for (un in usernames) {
pre <- paste(dplyr::filter(all_posts, username==un, created_day<6)$body, collapse="\n")
on <- paste(dplyr::filter(all_posts, username==un, created_day==6)$body, collapse="\n")
post <- paste(dplyr::filter(all_posts, username==un, created_day>6)$body, collapse="\n")
output[i,] <- c(un, pre, on, post)
i <- i+1
}
usernames_posts <- data.frame(output)
usernames_posts
shiny::runApp('ProteoMill')
210979513/1e6
tools::package.dependencies("AnnotationDbi")
tools::package_dependencies("AnnotationDbi")
tools::package_dependencies("package:AnnotationDbi")
library(tools)
?package_dependencies
library(devtools)
install_github("ciphr", "hsamuelson")
install_github(hsamuelson/CiphR)
install_github("hsamuelson/CiphR")
library(ciphr)
library(robustbase)
library(compositions)
install_github("ciphr", "hsamuelson")
install_github("hsamuelson/CiphR")
asc <- function(x) { strtoi(charToRaw(x),16L) -96 } #to numeric
chr <- function(n) { #Same function used for the Viengere Cipher
final <- character()
for(i in 1:length(n)){
if(n[i] != 0){
final[i] <- rawToChar(as.raw(n[i]%%26 + 96))
}
else{
final[i] <- "z"
}
}
for(i in 1:length(final)){
if(final[i] == "`"){
final[i] <- "z"
}
}
return(paste0(final, collapse = ""))
} #to charaters
auto.Encrypt <- function(message, key){
message <- tolower(message) #make sure all numbers are lowercase
numbers <- asc(message)
key <- asc(key)
key <- c(key, numbers)
options(warn=-1) #this throughs an invalid error
encryptedMessage <- (numbers + key)##%%26
options(warn = 0)
encryptedMessage <- encryptedMessage[1:length(numbers)]
return(chr(encryptedMessage))
}
auto.Decrypt <- function(message, key){
message <- tolower(message)
numbers <- asc(message)
key <- asc(key)
#In order to decrypt one cannont repeat in a similar mannor to the Viginere Cipher because
#You do not know the letters of the decryption key excet the inital numbers of the encryption key
#So you need to recursivly decript the message.
encryptedMessage <- numeric()
for(i in 1:length(numbers)){
encryptedMessage[i] <- (numbers[i] - key[i])%%26
key[length(key) + 1] <- encryptedMessage[i]
}
return(chr(encryptedMessage))
}
auto.Encrypt("Mus_musculus.GRCm38.86.sqlite")
auto.Encrypt("Mus_musculus.GRCm38.86.sqlite", "proteomill")
auto.Decrypt("cmhsrjflgxhnufexfjgngcdziovaq", "proteomil")
auto.Decrypt("cmhsrjflgxhnufexfjgngcdziovaq", "proteomill")
auto.Decrypt("cmhsrjflgxhnufexfjgngcdziovaq", "proteomill")
auto.Encrypt("Mus_musculus.GRCm38.86.sqlite", "proteomill")
auto.Decrypt("cmhsrjflgxhnufexfjgngcdziovaq", "proteomill")
auto.Decrypt("cmhsrjflgxhnufexfjgngcdziovaq", "pr")
auto.Decrypt("cmhsrjflgxhnufexfjgngcdziovaq", "proteo")
auto.Encrypt("Mus_musculus.GRCm38.86.sqlite", "")
auto.Decrypt("zplxzplfpxpldnjfznxdxtdlhxrnj", "proteo")
auto.Decrypt("zplxzplfpxpldnjfznxdxtdlhxrnj", "")
auto.Decrypt("zplxzplfpxpldnjfznxdxtdlhxrnj", " ")
install.packages("safer")
library(safer)
mus <- 'Mus_musculus.GRCm38.86.sqlite'
safer::encrypt_string(mus, key = "proteomill")
safer::encrypt_string(mus, key = "proteomill")
safer::encrypt_string(mus, key = "proteomil")
safer::encrypt_string(mus, key = "proteomill")
ciph <- safer::encrypt_string(mus, key = "proteomill")
safer::decrypt_string(ciph, "proteomill")
# Decrypt message with private key
out <- simple_decrypt(ciphertext, key)
# Generate keypair
key <- keygen()
library(sodium)
passkey <- sha256(charToRaw("proteomill"))
plaintext <- "Mus_musculus.GRCm38.86.sqlite"
plaintext.raw <- serialize(plaintext, NULL)
ciphertext <- data_encrypt(plaintext.raw, key = passkey)
unserialize(data_decrypt(ciphertext, key = sha256(charToRaw("proteomill"))))
ciphertext
paste0(ciphertext)
paste0(ciphertext, collapse = "")
ciph
auto.Encrypt("Mus_musculus.GRCm38.86", "")
auto.Encrypt("Mus_musculus.GRCm38.86", "fhaeofihjaofa")
encrypt_string("Mus_musculus", "")
all_organisms <- fread("~/Downloads/all_organisms.uniprot_2_string.2018.tsv.gz")
library(data.table)
all_organisms <- fread("~/Downloads/all_organisms.uniprot_2_string.2018.tsv.gz")
all_organisms
rm(all_organisms)
all_organisms <- fread("~/Downloads/all_organisms.uniprot_2_string.2018.tsv.gz", sep = "\t")
all_organisms <- fread("~/Downloads/all_organisms.uniprot_2_string.2018.tsv.gz", sep = "\t")
head(all_organisms)
all_organisms <- fread("~/Downloads/all_organisms.uniprot_2_string.2018.tsv.gz")
all_organisms
library(org.Hs.eg.db)
keytypes(org.Hs.eg.db)
?org.Hs.eg.db
columns(org.Hs.eg.db)
BiocManager::install("STRINGdb")
library(STRINGdb)
ids <- fread("~/ProteoMill/data/donors.uniprot.csv")
ids
ids <- ids$V1
?STRINGdb::multi_map_df(ids, )
rm(all_organisms)
# Pathways hierarchy relationship
REACTOME_hierarchy <- data.table::fread(collect("https://reactome.org/download/current/ReactomePathwaysRelation.txt"),
header = F)
collect <- function (source_fp, target_fp = "") {
target_fp <- file.path(basename(source_fp))
out_name <- gsub(".gz", "", target_fp)
if (file.exists(out_name)) {
return(out_name)
}
else {
download.file(url = source_fp, destfile = target_fp)
if (grepl(".gz", target_fp, fixed = T)) {
R.utils::gunzip(target_fp, overwrite = F)
}
return(out_name)
}
}
# Pathways hierarchy relationship
REACTOME_hierarchy <- data.table::fread(collect("https://reactome.org/download/current/ReactomePathwaysRelation.txt"),
header = F)
REACTOME_hierarchy
# All levels of the pathway hierarchy
# https://reactome.org/download/current/UniProt2Reactome_All_Levels.txt
#
REACTOME_all <- data.table::fread(collect("https://reactome.org/download/current/UniProt2Reactome_All_Levels.txt"))
colnames(REACTOME_all) <- c("UniprotID",
"ReactomeID",
"URL",
"Pathway_name",
"Evidence_code",
"Species")
REACTOME_all
actions <- collect('https://stringdb-static.org/download/protein.actions.v11.0/9606.protein.actions.v11.0.txt.gz')
actions <- fread(actions)
interactions <- data.table::fread(collect("https://stringdb-static.org/download/protein.links.v11.0/9606.protein.links.v11.0.txt.gz"), sep = " ",
header = T)
uniprot_to_string_src <- fread("human.uniprot_2_string.2018.tsv")
shiny::runApp('ProteoMill')
shiny::runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
p
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
log1p(1)
log1p(10)
log(10)
runApp('ProteoMill')
shiny::runApp('ProteoMill')
runApp('ProteoMill')
shiny::runApp('ProteoMill')
?menuItem
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
install.packages("bookdown")
shiny::runApp('ProteoMill')
dw1
dw_cor1
dw_cor1[is.na(dw_cor1)] <- 0 # Impute
cor(dw_cor1)
cor(dw_cor1, method = "spearman")
cor(dw_cor1, method = "kendall")
library(distill)
install.packages("distill")
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
knitr::include_graphics('img/volcano1.png')
knitr::include_graphics('img/volcano2.png')
knitr::include_graphics('img/volcano3.png')
knitr::include_graphics('img/pathway2.jpg')
?phyper
citation("data.table")
citation("networkD3")
cite <- citation("networkD3")
cite[1]
typeof(cite)
citation("visnetwork")
citation("visNetwork")
cite(mixOmics)
cite("mixOmics")
citation(mixOmics)
citation("mixOmics")
citation("AnnotationDbi ")
citation("AnnotationDbi")
citation("ensembldb")
cite(stats)
cite("stats")
citation("stats")
citation("shinydashboard")
citation("shiny")
library(data.table)
database <- fread("~/ProteoMill-examples/9606_REACTOME_low.tsv.gz", sep = '\t', header = T)
# How many rows are in the database?
database[, .N]
# Next, we need a list of protein identifiers.
proteins <- fread("~/ProteoMill-examples/donors.uniprot.csv", sep = ';', header = T)[[1]]
# Show first 10
head(proteins, 10)
# How many are there in total?
length(proteins)
ora <- function(proteins, database, pAdjMethod = "BH") {
#proteins <- proteins[proteins %in% database$UniprotID]
if(length(proteins) == 0) {
return (NULL)
} else {
# Genes and their counts in input and background, for each pathway
dt <- database[, list(proteins      = list(UniprotID[UniprotID %in% proteins]),
background = list(UniprotID),
q          = length(UniprotID[UniprotID %in% proteins]),
m          = length(UniprotID)),
by = .(ReactomeID, Pathway_name, TopReactomeName)]
dt <- dt[q > 0]
# Total number of proteins
dtN = database[!duplicated(UniprotID), .N]
# Calculate and format p-values
dt[ , p := mapply(phyper, q-1, m, n = (dtN - m), k = length(proteins), lower.tail = F)]
dt$p.adj  <- p.adjust(dt$p, method = pAdjMethod)
dt$p      <- formatC(dt$p, format = "e", digits = 2)
dt$p.adj  <- formatC(dt$p.adj, format = "e", digits = 2)
dt        <- dt[order(as.numeric(p.adj))]
return(dt)
}
}
# We call the function using our protein vector and database.
res <- ora(proteins, database)
res
# Let's take a quick peek at the results
res[1:4, c(2, 9)]
ora <- function(proteins, database, pAdjMethod = "BH") {
#proteins <- proteins[proteins %in% database$UniprotID]
if(length(proteins) == 0) {
return (NULL)
} else {
# Genes and their counts in input and background, for each pathway
dt <- database[, list(proteins      = list(UniprotID[UniprotID %in% proteins]),
background = list(UniprotID),
q          = length(UniprotID[UniprotID %in% proteins]),
m          = length(UniprotID)),
by = .(ReactomeID, Pathway_name, TopReactomeName)]
dt <- dt[q > 0]
# Total number of proteins
dtN = database[!duplicated(UniprotID), .N]
# Calculate and format p-values
dt[ , p := mapply(phyper, q-1, m, n = (dtN - m), k = length(proteins), lower.tail = F)]
dt$p.adj  <- p.adjust(dt$p, method = pAdjMethod)
dt$p      <- formatC(dt$p, format = "e", digits = 2)
dt$p.adj  <- formatC(dt$p.adj, format = "e", digits = 2)
dt        <- dt[order(as.numeric(p.adj))]
return(dt)
}
}
# We call the function using our protein vector and database.
res <- ora(proteins, database)
res
# Then we call the function again using a package called microbenchmark to evaluate the performance.
library(microbenchmark)
res <- microbenchmark(ora(proteins, database), times=100L)
# Show time in seconds
options(microbenchmark.unit="ms")
print(res)
boxplot(res, log = F)
res
timestamp()
##------ Sat Apr 24 14:27:43 2021 ------##
time()
?timestamp
Sys.time()
t1 <- Sys.time()
t2 <- Sys.time()
t2-t1
shiny::runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
2.26*1000
runApp('ProteoMill')
0.09051085 * 1000
runApp('ProteoMill')
5.041873 * 1000
0.2145362 * 1000
runApp('ProteoMill')
0.3669269 * 1000
runApp('ProteoMill')
t3
runApp('ProteoMill')
0.12 * 1000
0.1217289 * 1000
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
runApp('ProteoMill')
0.02646422 * 1000
0.01819706 * 1000
runApp('ProteoMill')
0.02232599 * 100
0.02232599 * 1000
plot_ly
?plot_ly
reticulate::repl_python()
reticulate::source_python('~/Desktop/pseudo.py')
reticulate::install_miniconda()
reticulate::source_python('~/Desktop/pseudo.py')
reticulate::repl_python()
reticulate::source_python('~/Desktop/pseudo.py')
reticulate::source_python('~/Desktop/pseudo.py')
reticulate::source_python('~/Desktop/pseudo.py')
reticulate::source_python('~/Desktop/pseudo.py')
reticulate::source_python('~/Desktop/pseudo.py')
reticulate::source_python('~/Desktop/pseudo.py')
reticulate::repl_python()
reticulate::source_python('~/Desktop/pseudo.py')
Vuxen
4
reticulate::source_python('~/Desktop/pseudo.py')
Vuxen
reticulate::source_python('~/Desktop/pseudo.py')
Barn
3
reticulate::repl_python()
reticulate::source_python('~/Desktop/pseudo.py')
reticulate::source_python('~/Desktop/pseudo.py')
Barn
3
reticulate::repl_python()
reticulate::source_python('~/Desktop/pseudo.py')
k
Nej
shiny::runApp('TI4Designer')
